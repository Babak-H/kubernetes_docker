# pod getting values from ConfigMap
---
apiVersion: v1
kind: Pod
metadata:
  name: webapp-color
  labels:
    name: webapp-color
spec:
  containers:
    - name: webapp-color
      image: kodekloud/webapp-color
      env:
        - name: APP_COLOR # name of the env variable
          valueFrom:
            # we only want a specific key from this configmap
            configMapKeyRef:
              name: webapp-config-map  # name of config map
              key: APP_COLOR  # name of the entity in config map


# pod getting values from Secret
---
apiVersion: v1
kind: Pod
metadata:
  name: webapp-pod
  labels:
    run: webapp-pod
spec:
  containers:
    - name: webapp
      image: kodekloud/simple-webapp-mysql
      # envFrom means we are getting all data from the secret or configMap
      envFrom:
        - secretRef:
            name: db-secret

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-configMap
# here we save the environment variables for the whole project
data:
  DB_CONNECTION: "pg"
  DB_HOST: "postgres-cluster-ip-service"
  DB_PORT: '5432'
  DB_USER: "postgres"
  DB_DATABASE: "notesdb"


---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
data:
  password: NjNlYVFCOXd0THFtTkJwZw==  # base64

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-Deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      component: postgres
  template:
    metadata:
      labels:
        component: postgres
    spec:
      containers:
        - name: postgres
          image: fhsinchy/notes-postgres
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRESS_PASSWORD
              # getting specific part of a secret inside our env
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: password
            - name: POSTGRES_DB
              value: notesDB


---
apiVersion: v1
kind: ConfigMap
metadata:
  name: game-demp
data:
  # property-like keys; each key maps to a simple value
  player_initial_lives: 3
  ui_properties_file_name: "user-interface.properties"

  # file-like keys
  game.properties: |
    enemy.types=aliens,monsters
    player.maximum-lives=5
  user-interface.properties: |
    color.good=purple
    color.bad=yellow
    allow.textmode=true


# create configmap from literal, and load it into pod as a volume in folder /etc/lala
# k create configmap cm-vol --from-literal=var1=val1 --from-literal=var2=val2
---
apiVersion: v1
kind: Pod
metadata:
  labels:
    run: nginx
  name: nginx
spec:
  volumes:
    # configMap loaded as volume
    - name: my-vol
      configMap:
        name: cm-vol
  containers:
    - image: nginx
      name: nginx
      volumeMounts:
        - name: my-vol
          mountPath: /etc/lala


# kubectl create secret generic mysecret2 --from-literal=username=babak-admin
---
apiVersion: v1
kind: Pod
metadata:
  labels:
    run: nginx
  name: nginx
spec:
  containers:
    - image: nginx
      name: nginx
      env:
        - name: USERNAME
          valueFrom:
            secretKeyRef:
              name: mysecret2
              key: username


---
apiVersion: v1
kind: Pod
metadata:
  labels:
    run: nginx
  name: nginx
spec:
  containers:
  - image: nginx
    name: nginx
    volumeMounts:
      - name: my-secret-vol
        mountPath: /etc/foo
    resources:
      requests:
        cpu: 0.5
        memory: 1Gi
      limits:
        cpu: 1
        memory: 2Gi
  volumes:
    - name: my-secret-vol
      secret:
        secretName: mysecret2


# accessing configmap from Another Namespace
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-configmap
data:
  # mysql-service : name of the Service for mysql pod
  # database : namespace that mysql pod is located at
  db_url: mysql-service.database


# check if the given namespace does exist, if it does NOT, create it
# kubectl get ns
# kubectl create ns dvl1987

# kubectl run time-check --image=busy-box --dry-run=client -o yaml > time-check-pod.yaml
# vi time-check-pod.yaml
---
apiVersion: v1  
kind: Pod
metadata: 
  name: time-check
  namespace: dvl1987
spec: 
  containers:
  - image: time-check 
    name: busy-box  
    envFrom:
    - configMapRef: 
        name: time-config  # the name of the config map, we get all the key-val pairs from configmap loaded to pod's environment variables
    command: ["/bin/sh", "-c", "while true; do date; sleep $TIME_FREQ; done > /opt/time/time-check.log"]
    volumeMounts:
    - mountPath: /opt/time  
      name: my-vol  
  volumes:
  - name: my-vol  
    emptyDir: {}
    
# kubectl create cm time-config -n dvl1987 --from-literal=TIME_FREQ=10
# kubectl get cm -n dvl1987
---
apiVersion: v1  
kind: ConfigMap 
metadata:
  name: time-config 
  namespace: dvl1987
data:
  TIME_FREQ: "10"

  
# Create a Secret named 'my-secret' of type 'kubernetes.io/ssh-auth' in the namespace 'secret-ops'. Define a single key named 'ssh-privatekey', and point it to the file 'id_rsa' in this directory.
# here we equate the entire content of file id_rsa to variable ssh-privatekey
# k create secret generic my-secret -n secret-ops --type="kubernetes.io/ssh-auth" --from-file=ssh-privatekey=id_rsa
# or
---
apiVersion: v1
kind: Secret
metadata:
  name: my-secret
  namespace: secret-ops
type: kubernetes.io/ssh-auth
data:
  ssh-privatekey: ""

# Create a Pod named 'consumer' with the image 'nginx' in the namespace 'secret-ops', and consume the Secret as Volume. Mount the Secret as Volume to the path /var/app with read-only access
---
apiVersion: v1
kind: Pod
metadata:
  labels:
    run: consumer
  name: consumer
  namespace: secret-ops
spec:
  volumes:
    - name: secret-vol
      secret:
        secretName: my-secret
        optional: true
  containers:
    - image: nginx
      name: consumer
      volumeMounts:
        - name: secret-vol
          mountPath: /var/app
          readOnly: true
