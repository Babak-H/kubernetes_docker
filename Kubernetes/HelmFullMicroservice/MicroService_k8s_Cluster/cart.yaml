apiVersion: apps/v1
kind: Deployment
metadata:
  name: cartservice
spec:
  replicas: 2
  selector:
    matchLabels:
      app: cartservice
  template:
    metadata:
      labels:
        app: cartservice
    spec:
      containers:
      - name: service
        image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
        ports:
        - containerPort: 7070
        env:
        - name: PORT
          value: "7070"
        - name: REDIS_ADDR
          value: "redis-cart:6379"
        livenessProbe:
          periodSeconds: 30
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:7070"]
        readinessProbe:
          periodSeconds: 30
          exec:
            command: ["/bin/grpc_health_probe", "-addr=:7070"]
        resources:
          requests:
            cpu: 200m
            memory: 160Mi
          limits:
            cpu: 300m
            memory: 280Mi

---
apiVersion: v1
kind: Service
metadata:
  name: cartservice
spec:
  type: ClusterIP
  selector:
    app: cartservice
  ports:
  - protocol: TCP
    port: 7070
    targetPort: 7070

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-cart
spec:
  replicas: 2
  selector:
    matchLabels:
      app: redis-cart
  template:
    metadata:
      labels:
        app: redis-cart
    spec:
      containers:
      - name: redis
        image: redis:alpine
        ports:
        - containerPort: 6379

        # redis is a memory-based program, so we give it more memory and less cpu to use
        resources:
          requests:
            cpu: 50m
            memory: 200Mi
          limits:
            cpu: 100m
            memory: 400Mi

        livenessProbe:
          initialDelaySeconds: 20
          periodSeconds: 30
          # instead of executing health/readiness probe commands we can open tcp socket port for health checkup
          tcpSocket:
            port: 6379

        readinessProbe:
          initialDelaySeconds: 20
          periodSeconds: 30
          # instead of executing health/readiness probe commands we can open tcp socket port for health checkup
          tcpSocket:
            port: 6379

        volumeMounts:
        - name: redis-data
        # this is the default location where redis will save the data
          mountPath: /data
      volumes:
      - name: redis-data
        emptydir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: redis-cart
spec:
  type: ClusterIP
  selector:
    app: redis-cart
  ports:
  - protocol: TCP
    port: 6379
    targetPort: 6379