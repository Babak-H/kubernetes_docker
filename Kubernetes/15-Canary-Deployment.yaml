# main app (v1) gets 80% and canary app (v2) gets 20% of traffic based on their Replica numbers

# in canary deployment, the service connects to Both of the app versions
---
apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:
  selector:
    app: front-end
  type: ClusterIP
  ports:
    - port: 80

# myapp-primary
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp-primary #####
  labels:
    app: myapp
    type: front-end
spec:
  replicas: 4 #####
  selector:
    matchLabels:
      type: front-end
  template:
    metadata:
      name: myapp-pod
      labels:
        version: v1 #####
        type: front-end
    spec:
      containers:
      - name: app-container
        image: myapp-image:1.0 #####

# myapp-canary
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp-canary #####
  labels:
    app: myapp
    type: front-end
spec:
  replicas: 1 #####
  selector:
    matchLabels:
      type: front-end
  template:
    metadata:
      name: myapp-pod
      labels:
        version: v2 #####
        type: front-end
    spec:
      containers:
      - name: app-container
        image: myapp-image:2.0 #####


# Implement canary deployment by running two instances of nginx marked as version=v1 and version=v2 so that the load is balanced at 75%-25% ratio
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app-v1 ####
  labels:
    app: my-app
spec:
  replicas: 3 ###
  selector:
    matchLabels:
      app: my-app
      version: v1 ###
  template:
    metadata:
      labels:
        app: my-app
        version: v1 ###
    spec:
      containers:
        - image: nginx:1.16 ###
          name: nginx
          ports:
            - containerPort: 80
            
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app-v2 ###
  labels:
    app: my-app
spec:
  replicas: 1 ###
  selector:
    matchLabels:
      app: my-app
      version: v2 ###
  template:
    metadata:
      labels:
        app: my-app
        version: v2 ###
    spec:
      containers:
        - image: nginx:1.17 ###
          name: nginx
          ports:
            - containerPort: 80

---
apiVersion: v1
kind: Service
metadata:
  name: my-app-svc
  labels:
    app: my-app
spec:
  type: ClusterIP
  selector:
    # use a label that can select pods from BOTH deployments
    app: my-app
  ports:
    - name: http
      port: 80
      targetPort: 80
